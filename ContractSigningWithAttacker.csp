#import "PAT.Math";


/***** Constants *****/
// Contract ID
#define CONTRACT 11;

// P1 P2 states
#define GENERATE 0;
#define SENDPROMISE 1;
#define RECPROMISE 2;
#define SENDSIGN 3;
#define RECSIGN 4;
#define END 5;
#define QUIT 6;

// Trusted Party states
#define INIT 1;
#define ABORTED 2;
#define RESOLVED1 3;
#define RESOLVED2 4;

// Router and Attacker states
#define SECURE -10;
#define ATTACKER -20;

// P1 keys
#define P1PUBLIC 7;
#define P1PRIVATE 7;
#define P1MOD 21;

// P2 keys
#define P2PUBLIC 5;
#define P2PRIVATE 5;
#define P2MOD 14;

// Trusted Party keys
#define TRUSTPUBLIC 3;
#define TRUSTPRIVATE 3;
#define TRUSTMOD 15;

// Dummy value
#define EMPTY -1;
#define GARBAGE -69;

// Party IPs
#define P1IP 1;
#define P2IP 2;
#define TRUSTEDIP 3;

// Message types
#define PROMISETYPE -2;
#define SIGNTYPE -3;
#define ABORTTYPE -4;
#define RESOLVE1TYPE -5;
#define RESOLVE2TYPE -6;
#define ABORTCONFIRMATION -7;
#define RESOLVECONFIRMATION -8;

/***** Global Variables *****/
// P1
var p1State = GENERATE;
var p1RecPromise = EMPTY;
var p1RecSign = EMPTY;
var p1Promise;
var p1Sign;
var p1TrustedConfirmation = EMPTY;

// P2
var p2State = GENERATE;
var p2RecPromise = EMPTY;
var p2RecSign = EMPTY;
var p2Promise;
var p2Sign;
var p2TrustedConfirmation = EMPTY;

// Trusted Party
var trustedStatus = INIT;
var confirmation;
var generatedPrivate;
var generatedSignature;
var auth;
var trustedContract = EMPTY;

// Router and Attacker
var routerState = EMPTY;


/***** Channels *****/
channel toRouter 10;

channel routerToP1 10;
channel routerToP2 10;
channel routerToTrusted 10;


/***** Message encoding style *****/
/*
	Msgtype:	Promise		Sign		Abort		Resolve1		Resolve2
	field 1:	Source IP(always)------------------------------------------------ 		
	field 2:	Dest Ip(always)--------------------------------------------------	
	field 3:	Msg Type(always)-------------------------------------------------
	field 4:	Promise		Signature	P1Promise	P1Sign			P2Sign
	field 5:	EMPTY		EMPTY		EMPTY		P2Promise		P1Promise
	field 6:	CONTRACT(always)-------------------------------------------------
	
	Msgtype: 	AbortConfirmation		ResolveConfirmation
	field 1: 	Source IP(always)------------------------------------------------   
	field 2: 	Dest Ip(always)--------------------------------------------------
	field 3: 	Msg Type(always)-------------------------------------------------
	field 4: 	Confirmation 			Confirmation
	field 5: 	EMPTY					Auth
	field 6: 	CONTRACT(always)-------------------------------------------------
*/

// P1
P1() =
	[p1State == GENERATE]P1GenerateValues()
	[]
	[p1State == SENDPROMISE]P1SendPromise()
	[]
	[p1State == RECPROMISE]P1ReceivePromise()
	[]
	[p1State == SENDSIGN]P1SendSign()
	[]
	[p1State == RECSIGN]P1ReceiveSign()
	[]
	[p1State == END || p1State == QUIT]Skip;

P1GenerateValues() = 
	p1GeneratePromise{p1Promise = call(Pow, P1PRIVATE, TRUSTPUBLIC) % TRUSTMOD}
	-> p1GenerateSignature{p1Sign = call(Pow, CONTRACT, P1PRIVATE) % P1MOD}
	-> p1SetStateSP{p1State = SENDPROMISE}
	-> P1();
	
P1SendPromise() =
	toRouter!P1IP.P2IP.PROMISETYPE.p1Promise.EMPTY.CONTRACT
	-> p1SetStateRP{p1State = RECPROMISE}
	-> P1()
	[]
	toRouter!P1IP.P2IP.PROMISETYPE.EMPTY.EMPTY.EMPTY
	-> p1Terminate{p1State = QUIT}
	-> P1();
	
P1ReceivePromise() = routerToP1?src.dest.msgtype.data1.data2.ct 
	-> P1ReceivePromiseAction(src, dest, msgtype, data1, data2, ct);

P1ReceivePromiseAction(src, dest, msgtype, data1, data2, ct) =
	if (msgtype != PROMISETYPE || ct != CONTRACT || data1 == EMPTY)
	{
		// send abort if invalid promise received
		toRouter!P1IP.TRUSTEDIP.ABORTTYPE.p1Promise.EMPTY.CONTRACT
		// receive abort confirmation from trusted party
		-> routerToP1?f1.f2.f3.f4.f5.f6
		// validate abort confirmation
		-> P1ReceiveTrustedAbortConfirmation(f1, f2, f3, f4, f5, f6)
	}
	else
	{
		p1StoreReceivedPromise{p1RecPromise = data1}
		-> p1SetStateSS{p1State = SENDSIGN}
		-> P1()
	};
	
P1ReceiveTrustedAbortConfirmation(src, dest, msgtype, data1, data2, ct) =
	if (p1Promise!= call(Pow,data1,TRUSTPRIVATE)%TRUSTMOD)
	{
		p1AbortFail{p1State = END}
		-> P1()
	}
	else if (msgtype == RESOLVECONFIRMATION)
	{
		p1GetP2Sign{p1RecSign = call(Pow, data1, TRUSTPUBLIC) % TRUSTMOD}
		-> p1SetStateE{p1State = END}
		-> P1()
	}
	else if (msgtype == ABORTCONFIRMATION)
	{
		p1StoreAbortConfirmation{p1TrustedConfirmation = data1} 
		-> p1SetStateE{p1State = END}
		-> P1()
	};
	
P1SendSign() =
	toRouter!P1IP.P2IP.SIGNTYPE.p1Sign.EMPTY.CONTRACT
	-> p1SetStateRS{p1State = RECSIGN}
	-> P1()
	[]
	toRouter!P1IP.P2IP.SIGNTYPE.EMPTY.EMPTY.EMPTY
	-> p1Terminate{p1State = QUIT}
	-> P1();

P1ReceiveSign() = routerToP1?src.dest.msgtype.data1.data2.ct 
-> P1ReceiveSignAction(src, dest, msgtype, data1, data2, ct);

P1ReceiveSignAction(src, dest, msgtype, data1, data2, ct)=
	if (msgtype != SIGNTYPE || 
		ct != CONTRACT ||
		data1 == EMPTY ||
		call(Pow, data1, P2PUBLIC) % P2MOD != CONTRACT)
	{
		// send resolve1 if invalid sign received
		toRouter!P1IP.TRUSTEDIP.RESOLVE1TYPE.p1Sign.p1RecPromise.CONTRACT
		// receive resolve1 confirmation from trusted party
		-> routerToP1?f1.f2.f3.f4.f5.f6
		// validate resolve1 confirmation
		-> P1ReceiveTrustedResolve1Confirmation(f1, f2, f3, f4, f5, f6) 
	}
	else
	{
		p1StoreReceivedSign{p1RecSign = data1}
		-> p1SetStateE{p1State = END}
		-> P1()
	};
	
P1ReceiveTrustedResolve1Confirmation(src, dest, msgtype, data1, data2, ct) =
	if (msgtype == ABORTCONFIRMATION||call(Pow,data2,TRUSTPUBLIC)% TRUSTMOD != p1Sign)
	{
		resolve1Fail{p1State = END}
		-> P1()
	}
	else if (msgtype == RESOLVECONFIRMATION)
	{
		p1StoreResolve1Confirmation{p1TrustedConfirmation = data1}
		-> p1GetP2Sign{p1RecSign = call(Pow, p1TrustedConfirmation, TRUSTPUBLIC) % TRUSTMOD}
		-> p1SetStateE{p1State = END}
		-> P1()
	};


// P2
P2() = 
	[p2State == GENERATE]P2GenerateValues()
	[]
	[p2State == RECPROMISE]P2ReceivePromise()
	[]
	[p2State == SENDPROMISE]P2SendPromise()
	[]
	[p2State == RECSIGN]P2ReceiveSign()
	[]
	[p2State == SENDSIGN]P2SendSign()
	[]
	[p2State == END || p2State == QUIT]Skip;

P2GenerateValues() =
	p2GeneratePromise{p2Promise = call(Pow,P2PRIVATE,TRUSTPUBLIC) % TRUSTMOD}
	-> p2GenerateSignature{p2Sign = call(Pow,CONTRACT,P2PRIVATE) % P2MOD}
	-> p2SetStateRP{p2State = RECPROMISE}
	-> P2();
	
P2ReceivePromise() = routerToP2?src.dest.msgtype.data1.data2.ct 
	-> P2ReceivePromiseAction(src, dest, msgtype, data1, data2, ct);

P2ReceivePromiseAction(src, dest, msgtype, data1, data2, ct) =
	if(msgtype != PROMISETYPE || ct != CONTRACT || data1 == EMPTY)
	{
		p2SetStateE{p2State = END}
		-> P2()
	}
	else
	{
		p2StoreReceivedPromise{p2RecPromise = data1}
		-> p2SetStateSP{p2State = SENDPROMISE}
		-> P2()
	};
	
P2SendPromise() = 
	toRouter!P2IP.P1IP.PROMISETYPE.p2Promise.EMPTY.CONTRACT
	-> p2SetStateRS{p2State = RECSIGN}
	-> P2()
	[]
	toRouter!P2IP.P1IP.PROMISETYPE.EMPTY.EMPTY.EMPTY
	-> p2Terminate{p2State = QUIT}
	-> P2();

P2ReceiveSign() = routerToP2?src.dest.msgtype.data1.data2.ct 
	-> P2ReceiveSignAction(src, dest, msgtype, data1, data2, ct);

P2ReceiveSignAction(src, dest, msgtype, data1, data2, ct) =
	if(msgtype != SIGNTYPE || ct != CONTRACT || data1 == EMPTY || call(Pow, data1, P1PUBLIC) % P1MOD != CONTRACT)
	{	
		toRouter!P2IP.TRUSTEDIP.RESOLVE2TYPE.p2Sign.p2RecPromise.CONTRACT // send resolve2 if invalid sign received
		-> routerToP2?f1.f2.f3.f4.f5.f6 // receive resolve2 confirmation from trusted party
		-> P2ReceiveTrustedResolve2Confirmation(f1, f2, f3, f4, f5, f6) // validate resolve2 confirmation
	}
	else
	{
		p2StoreReceivedSign{p2RecSign = data1}
		-> p2SetStateSS{p2State = SENDSIGN}
		-> P2()
	};
	
P2ReceiveTrustedResolve2Confirmation(src, dest, msgtype, data1, data2, ct) =
	if(msgtype == ABORTCONFIRMATION||call(Pow,data2,TRUSTPUBLIC)% TRUSTMOD != p2Sign)
	{
		resolve2Fail{p2State = END}
		-> P2()
	}
	else if(msgtype == RESOLVECONFIRMATION)
	{
		p2StoreResolve2Confirmation{p2TrustedConfirmation = data1}
		-> p2GetP1Sign{p2RecSign = call(Pow, p2TrustedConfirmation, TRUSTPUBLIC) % TRUSTMOD}
		-> p2SetStateE{p2State = END}
		-> P2()
	};

P2SendSign() = 
	toRouter!P2IP.P1IP.SIGNTYPE.p2Sign.EMPTY.CONTRACT
	-> p2SetStateE{p2State = END}
	-> P2()
	[]
	toRouter!P2IP.P1IP.SIGNTYPE.EMPTY.EMPTY.EMPTY
	-> p2Terminate{p2State = QUIT}
	-> P2();

// Trusted Party
TrustedParty() = routerToTrusted?src.dest.msgtype.data1.data2.ct 
	-> TrustedPartyAction(src, dest, msgtype, data1, data2, ct);
	
TrustedPartyAction(src, dest, msgtype, data1, data2, ct) =
	if ((trustedStatus == RESOLVED1 || trustedStatus == RESOLVED2) && trustedContract == ct) 
	{
		toRouter!TRUSTEDIP.src.RESOLVECONFIRMATION.confirmation.auth.CONTRACT
		-> TrustedParty()
	} 
	else if (trustedStatus == ABORTED && trustedContract == ct)
	{
		toRouter!TRUSTEDIP.src.ABORTCONFIRMATION.confirmation.EMPTY.CONTRACT
		-> TrustedParty()
	}
	else if (msgtype == ABORTTYPE)
	{
		setStatusAbort{trustedStatus = ABORTED}
		-> storeContract{trustedContract = ct}
		-> generateAbortConfirmation{confirmation = call(Pow, data1, TRUSTPRIVATE) % TRUSTMOD}
		-> toRouter!TRUSTEDIP.src.ABORTCONFIRMATION.confirmation.EMPTY.CONTRACT
		-> TrustedParty()
	}
	else if(msgtype == RESOLVE2TYPE)
	{
		setStatusResolved2{trustedStatus = RESOLVED2}
		-> storeContract{trustedContract = ct}
		-> generateP1Private{generatedPrivate = call(Pow, data2, TRUSTPRIVATE) % TRUSTMOD}
		-> generateP1Signature{generatedSignature = call(Pow, CONTRACT, generatedPrivate) % P1MOD}
		-> generateResolve2Confirmation{confirmation = call(Pow, generatedSignature, TRUSTPRIVATE) % TRUSTMOD}
		-> generateAuth{auth=call(Pow, data1, TRUSTPRIVATE) % TRUSTMOD}
		-> toRouter!TRUSTEDIP.src.RESOLVECONFIRMATION.confirmation.auth.CONTRACT
		-> TrustedParty()
	}
	else if(msgtype == RESOLVE1TYPE)
	{
		setStatusResolved1{trustedStatus = RESOLVED1}
		-> storeContract{trustedContract = ct}
		-> generateP2Private{generatedPrivate=call(Pow,data2,TRUSTPRIVATE)%TRUSTMOD}
		-> generateP2Signature{generatedSignature=call(Pow,CONTRACT,generatedPrivate)%P2MOD}
		-> generateResolved1Confirmation{confirmation=call(Pow,generatedSignature,TRUSTPRIVATE)%TRUSTMOD}
		-> generateAuth{auth=call(Pow, data1, TRUSTPRIVATE) % TRUSTMOD}
		-> toRouter!TRUSTEDIP.src.RESOLVECONFIRMATION.confirmation.auth.CONTRACT
		-> TrustedParty()
	};
	

// Router and Attacker
RouterSelector() = 
	secureRouter{routerState = SECURE} -> Router()
	[]
	attacker{routerState = ATTACKER} -> Attacker();

Router() =
	toRouter?src.dest.msgtype.data1.data2.ct -> Forward(src, dest, msgtype, data1, data2, ct);


Forward(src, dest, msgtype, data1, data2, ct) =
	if (dest == P2IP)
	{
		routerToP2!src.dest.msgtype.data1.data2.ct
		-> Router()
	}
	else if (dest == P1IP)
	{
		routerToP1!src.dest.msgtype.data1.data2.ct
		-> Router()
	}
	else if (dest == TRUSTEDIP)
	{
		routerToTrusted!src.dest.msgtype.data1.data2.ct
		-> Router()
	} else {
		Router()
	};
	
Attacker() =
	toRouter?src.dest.msgtype.data1.data2.ct -> Attack(src, dest, msgtype, data1, data2, ct);

Attack(src, dest, msgtype, data1, data2, ct) =
	if(dest == P2IP)
	{
		routerToP2!src.dest.msgtype.data1.data2.ct
		-> Attacker()
		[]
		routerToP2!GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE
		-> Attacker()
	} 
	else if (dest == P1IP)
	{
		routerToP1!src.dest.msgtype.data1.data2.ct
		-> Attacker()
		[]
		routerToP1!GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE
		-> Attacker()
	}
	else if(dest == TRUSTEDIP)
	{
		routerToTrusted!src.dest.msgtype.data1.data2.ct
		-> Attacker()
		[]
		routerToTrusted!GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE.GARBAGE
		-> Attacker()
	} else {
		Attacker()
	};

System() = P1() ||| P2() ||| TrustedParty() ||| RouterSelector();

#define noattacker (routerState == SECURE);
#define withattacker (routerState == ATTACKER);

/***** Implementation Checking *****/
/* Should pass if our implementation of the protocol is correct */

// 1. P2 only sends promise when it receives valid P1 promise
#define p2sendpromise (p2State == RECSIGN);
#define p2receivesgoodpromise (p2RecPromise == p1Promise && p2State != QUIT);
#assert System |= [](p2sendpromise -> p2receivesgoodpromise);

// 2. P1 only sends signature when it receives valid P2 Promise
#define p1sendsign (p1State == RECSIGN);
#define p1receivesgoodpromise (p1RecPromise == p2Promise && p1State != QUIT);
#assert System |= [](p1sendsign -> p1receivesgoodpromise);

/***** Protocol Verification *****/
/* Should pass if protocol works as described */

// TODO: The "reaches" operator only checks for existence of one branch that satisfies
// 3. Both processes eventually end or quit
#define processesend (p1State == END || p1State == QUIT) && (p2State == QUIT || p2State == END);
#assert System |= <>processesend;

// 4. If P1 sends signature, both parties will eventually get signature
#define bothreceivesign (p1RecSign == p2Sign && p2RecSign == p1Sign);
#assert System |= [](p1sendsign && noattacker -> <>bothreceivesign);

// 5. If P1 receives P2's promise and doesn't quit, it will get P2's signature
// 	  Covers both success scenario and resolve1
#define p1receivep2promise (p1RecPromise == p2Promise && p1State != QUIT);
#define p1receivep2sign (p1RecSign == p2Sign);
#assert System |= []([]p1receivep2promise && noattacker -> <>p1receivep2sign);

// 6. If P2 receives P1's promise and doesn't quit, it will get P1's signature
//    Covers both success scenario and resolve2
#define p2receivep1promise (p2State != QUIT && p2RecPromise == p1Promise);
#define p2receivep1sign (p2RecSign == p1Sign);
#assert System |= []([]p2receivep1promise && noattacker -> <>p2receivep1sign);

// 7. If trusted party has once aborted, neither party will receive signature
#define trustedstatusaborted (trustedStatus == ABORTED);
#assert System |= [](trustedstatusaborted -> []!bothreceivesign);

// 8. If trusted party has once resolved, he will not entertain aborts
#define trustedstatusresolve (trustedStatus == RESOLVED1 || trustedStatus == RESOLVED2);
#define trustedstatusabort (trustedStatus == ABORTED);
#define abortconfirmation (p1TrustedConfirmation == call(Pow, p1Promise, TRUSTPRIVATE) % TRUSTMOD);
#assert System |= [](trustedstatusresolve -> []!abortconfirmation);

// 9. After trusted party has aborted, P1 will eventually receive abort confirmation
#assert System |= [](trustedstatusabort && noattacker -> <>abortconfirmation);

#define trustedidle (trustedStatus == INIT);
#define bothnoquit (p1State != QUIT && p2State != QUIT);
#assert System |= [](noattacker && bothnoquit -> trustedidle);
/***** Protocol Verification with Attacker *****/
/* Should pass if protocol works as described with an attacker */

// 10. Assertion 4 with attacker
#assert System |= [](p1sendsign && withattacker -> <>bothreceivesign);

// 11. 12. Assertion 5 and 6 with attacker
#assert System |= []([]p1receivep2promise && withattacker -> <>p1receivep2sign);
#assert System |= []([]p2receivep1promise && withattacker -> <>p2receivep1sign);
