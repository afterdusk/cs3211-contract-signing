//Define state
#define NONE 0;
#define SENDPROMISE 1;
#define RECPROMISE 2;
#define SENDSIGN 3;
#define RECSIGN 4;

#define CONTRACT 693541618;

#define P1PUBLIC 205;
#define P1PRIVATE 285;
#define P1MOD 1541;

#define P2PUBLIC 2533;
#define P2PRIVATE 97;
#define P2MOD 10033;

#define TRUSTPUBLIC 1235;
#define TRUSTPRIVATE 59;
#define TRUSTMOD 3293;

#define empty -1;

var P1State = SENDPROMISE;
var P2State = RECPROMISE;

var recContractP1;
var recPromiseP1;
var recSignedP1;

var recContractP2;
var recPromiseP2;
var recSignedP2;

channel P1TOP2 10;
channel P2TOP1 10;

var tempSecret;
var tempSign;

P1 =
[P1State == SENDPROMISE]wakeP2ForPromise{P2State = RECPROMISE;}-> P1SendPromise 
[]
[P1State == RECPROMISE]P2TOP1?placeholder0.placeholder1 -> p1ReceivesPromise{recContractP2=placeholder0;recPromiseP2=placeholder1;} -> P1
[]
[P1State == SENDSIGN]wakeP2ForSign{P2State = RECSIGN;}->P1SendSign 
[]
[P1State == RECSIGN]P2TOP1?placeholder0.placeholder1 -> p1ReceivesSign{recSignedP2=placeholder0;} -> P1;

P1SendPromise = generate{tempSecret=P1PRIVATE^TRUSTPUBLIC%TRUSTMOD} ->P1TOP2!CONTRACT.tempSecret->P1;
//p1 sends the contract as well as its private key encrypted with trustedparty secret key. 

P1SendSign = generate{tempSign=CONTRACT^P1PRIVATE%P1MOD}->P1TOP2!tempSign.empty->P1;

//P1Listen = P2TOP1?placeholder0.placeholder1 ->verify{
//if(P1State == RECPROMISE){recContractP2=placeholder0;recPromiseP2=placeholder1;}
//else if(P1State == RECSIGN){recSignedp2=placeholder0;} ->P1;


P2 = 
[P2State == RECPROMISE]P1TOP2?placeholder0.placeholder1 -> p2ReceivesPromise{recContractP1=placeholder0;recPromiseP1=placeholder1;} -> P2
[]
[P2State == SENDPROMISE]wakeP1ForPromise{P1State = RECPROMISE;} -> P2SendPromise
[]
[P2State == RECSIGN]P1TOP2?placeholder0.placeholder1 -> p2ReceivesSign{recSignedP1=placeholder0;} -> P2
[]
[P2State == SENDSIGN]wakeP1ForSign{P1State = RECSIGN;} -> P2SendSign;

P2SendPromise = generate{tempSecret=P2PRIVATE^TRUSTPUBLIC%TRUSTMOD}->P2TOP1!CONTRACT.tempSecret->P2;

P2SendSign = generate{tempSign=CONTRACT^P2PRIVATE%P2MOD}->P2TOP1!tempSign.empty->P2;

//P2Listen = P1TOP2?placeholder0.placeholder1 ->verify{
//if(P2State == RECPROMISE){recContractP1=placeholder0;recPromiseP1=placeholder1;}
//else if(P2State == RECSIGN){recSigned=placeholder0;}} ->P2;

System = P1|||P2;

#assert System deadlockfree;